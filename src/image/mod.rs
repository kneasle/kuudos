//! Image specification and rendering utilities.  In essence, this is an extremely basic
//! intermediate representation (IR) for vector images and some 'back-ends' to translate it to
//! other formats (e.g. SVG).  Like LLVM's IR, [`Image`]s are generated by various 'front ends' -
//! e.g. [`Builder`] and [`Shape`].

mod ir; // Intermediate representation for vector `Image`s
mod lowering; // Code for 'lowering' the IR - i.e. replacing any `XxxStyle` with the corresponding
              // `ConcreteXxxStyle`.  This step is used to simplify the back-ends, since they can
              // rely on taking fully specified 'concrete' IR
pub mod svg; // Conversion from [`Image`] to SVG

pub use ir::{
    ConcreteFillStyle, ConcreteStrokeStyle, ConcreteTextStyle, FillStyle, StrokeStyle, TextAnchor,
    TextStyle,
};
pub use lowering::RenderingOpts;

/// Re-export of [`ir::Image`] with the type params needed by the rest of the code
pub type Image = ir::Image<FillStyle, StrokeStyle, TextStyle>;
/// Version of [`ir::Image`] where all the styles are fully specified
pub type LoweredImage = ir::Image<ConcreteFillStyle, ConcreteStrokeStyle, ConcreteTextStyle>;

/// Re-export of [`ir::Elem`] with the type params needed by the rest of the code
pub type Elem = ir::Elem<FillStyle, StrokeStyle, TextStyle>;
/// Version of [`ir::Elem`] where all the styles are fully specified
pub type LoweredElem = ir::Elem<ConcreteFillStyle, ConcreteStrokeStyle, ConcreteTextStyle>;

/// Re-export of [`ir::Style`] with the type params needed by the rest of the code
pub type Style = ir::Style<FillStyle, StrokeStyle>;
/// Version of [`ir::Style`] where all the styles are fully specified
pub type LoweredStyle = ir::Style<ConcreteFillStyle, ConcreteStrokeStyle>;
